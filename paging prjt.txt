#include<bits/stdc++.h>
using namespace std;

int main ()
{

    int mm[8][128] = { 0 };
    map < int, int >pid_pgsize;
    map <int, int> pid_drsize;
    map< int,int> pid_prsize;
    int pid = 0;
    
    int rem;
    int c;
    
    
    std::list<int> free_pgs;
    
    for(int i=10;i<118;i++)
    {
        free_pgs.push_back(i);
    }
    
    while (1)
        {
            cout << "OPTIONS:\n";
            cout << "1.Create process\n";
            cout << "2.Delete process\n";
            cout << "3.Translation VA-PA of process\n";
            cout << "4.Print MM\n";
            cout << "5.Exit\n";
            cin >> c;
    switch (c)
    	{
    	case 1:
        int pr_size, pg_nos,no_full_pagetable,rem_half_pagetable;
        cout << "Enter Process Size:\n";
        cin >> pr_size;
        pid_prsize[pid] = pr_size;
        
        if (pr_size == 0)
        pg_nos = 0;
        
        else if (pr_size <= 8)
        pg_nos = 1;
        
        else if ((pr_size > 8) && (pr_size % 8 == 0))
        pg_nos = pr_size / 8;
        
        else
        {
            pg_nos = pr_size / 8 + 1;
            rem = pr_size % 8;
        }
        
            
        
        if (pg_nos > 0 && pg_nos <= 8 )
        {
            
            if (free_pgs.size() - pg_nos >= 0)
            {
                pid_pgsize[pid] = pg_nos;
                cout<<"\nImplemented Single-Level paging\n";
                for (int i = 0; i < pg_nos; i++)
                {
                    
                            mm[i][pid] = free_pgs.front();
                            free_pgs.pop_front();
                            
                            if(i==pg_nos-1)
                            {
                                for(int k = 0 ; k<rem;k++)
                                mm[k][mm[i][pid]]=1;
                            }
                            else 
                            {
                                for(int k = 0 ; k<8;k++)
                                    mm[k][mm[i][pid]]=1;
                            }
                }
                cout<<"\nProcess "<<pid<<" Created !!\n";
                pid++;
            }
            else
            {
                cout<<"\nImplementing LRU Policy\n-------- under construction--------\n";
                
            }
        }
          
          
              
        else if (pg_nos > 0 && pg_nos > 8 && pg_nos<=64)
        {
           
            cout<<"\nImplemented Multi-Level paging\n";
              
            int pg_dr,x,j,req_pg;
            if (pg_nos%8 ==0) pg_dr = pg_nos / 8;
            else pg_dr = pg_nos / 8 + 1;
           
            pid_drsize[pid]= pg_dr;
            pid_pgsize[pid] = pg_nos;
            
           if(free_pgs.size() - pg_nos - pg_dr >=0 )
           {
            
                for(int p=0;p<pg_dr;p++)
                {
                    mm[p][pid]=free_pgs.front();
                    free_pgs.pop_front();
                }
                
                no_full_pagetable = pg_nos/8;
                rem_half_pagetable = pg_nos%8;
                
                for(int p=0;p<no_full_pagetable;p++)
                {
                    for(int i=0;i<8;i++)
                    {
                        mm[i][mm[p][pid]] = free_pgs.front();
                        free_pgs.pop_front();
                        for(int y=0;y<8;y++)
                        {
                            mm[y][mm[i][mm[p][pid]]]=1;
                        }
                    }
                }
               
                for(int k = 0;k<rem_half_pagetable;k++)
                {
                    mm[k][mm[pg_dr-1][pid]] = free_pgs.front();
                    free_pgs.pop_front();
                    
                    for(int p = 0; p<8,k!=rem_half_pagetable-1;p++)
                    {
                        mm[p][mm[k][mm[pg_dr-1][pid]]]=1;
                    }
                    if(k==rem_half_pagetable-1)
                    {
                        for(int p=0;p<pid_prsize[pid]%8;p++)
                        {
                            mm[p][mm[k][mm[pg_dr-1][pid]]]=1;
                        }
                    }
                    
                    
                }
                cout<<"\nProcess "<<pid<<" Created !!\n";
                pid++;
           }
        }
        
        else
        {
            cout<<" Can't be allocated !! Requested Process size exceeds the max limit!";
            
        }
        
        break;
    
    	case 2:
            int del_id;
            cout << "\nEnter Process ID:\n";
            cin >> del_id;
            int i;
           
           if(pid_pgsize[del_id]<=8)
           {
               for(i=0;i<pid_pgsize[del_id];i++)
                {
                    int val = mm[i][del_id];
            	    cout<<"\n\n";
            	    
                    for(int k=0;k<8;k++)
                    {
                        mm[k][val]=0;
                    }
                    
                    free_pgs.push_back(mm[i][del_id]);
                    mm[i][del_id] = 0;
                }
                pid_pgsize[del_id]=0;
                cout<<"\nProcess "<<del_id<<" Deleted!!\n";
           }
           
           else
           {
               cout<<"\nProcess "<<del_id<<" started to delete!!\n";
               for(int i=0;i< pid_drsize[del_id];i++)
               {
                   int dir_table = mm[i][del_id];
                   
                   if(i != pid_drsize[del_id]-1)
                   {
                        for(int k=0;k<8;k++)
                            {
                                int pg_table = mm[k][dir_table];
                                
                                for(int j =0 ;j<8;j++)
                                {
                                    mm[j][pg_table]=0;
                                }
                                
                                free_pgs.push_back(pg_table);
                                mm[k][dir_table]=0;
                            }
                            
                        free_pgs.push_back(dir_table);
                        mm[i][del_id] = 0;
                   }
                   
                   else
                   {
                       for(int k=0; k<pid_pgsize[del_id]%8 ;k++)
                            {
                                int pg_table = mm[k][dir_table];
                                
                                if( k!= (pid_pgsize[del_id]%8) - 1)
                                {
                                    for(int j =0 ;j<8;j++)
                                    {
                                        mm[j][pg_table]=0;
                                    }
                                    free_pgs.push_back(pg_table);
                                }
                                
                                else
                                {
                                    for(int j =0 ;j< pid_prsize[del_id]%8 ;j++)
                                    {
                                        mm[j][pg_table]=0;
                                    }
                                    free_pgs.push_back(pg_table);
                                }
                                mm[k][dir_table]=0;
                            }
                        free_pgs.push_back(dir_table);
                        mm[i][del_id]=0;
                   }
                }
                cout<<"\n Multi-Level Deleted!!\n";
           }
           break; 
    
    	case 3:
            int trans_pid, line_no, va1, va2, pa, pg, line_pg,x,k1,k2;
            cout << "\nEnter the Process ID:\n";
            cin >> trans_pid;
            cout << "Enter the Line No:\n";
            cin >> line_no;
            pg = line_no / 8;
            line_pg = line_no % 8;
            
            if(pid_pgsize[trans_pid]<=8)
            {
            va1 = mm[pg][trans_pid];
            pa = ((va1 - 1) * 8) + line_pg;
            cout << "\nVirtual Add: " << va1;
            cout << "\tPhysical Add: " << pa;
            cout << endl<<endl;
            }
            
            else
            {
                if (line_no%8==0) x = line_no / 8;
                else x = line_no / 8 + 1;
                k1 = x / 8;
                k2 = x % 8;
                va2 = mm[k1][trans_pid];
                va1 = mm[k2-1][va2];
                pa = ((va1 - 1) * 8) + line_pg;
                cout << "\nVirtual Add L2: " << va2;
                cout << "\nVirtual Add L1: " << va1;
                cout << "\tPhysical Add: " << pa;
                cout << endl<<endl;
            }
            break;
    
    	case 4:
            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 128; j++)
                {
                    cout << mm[i][j] << " ";
                }
                cout << endl;
            }
            break;
            cout<<endl; 

    	case 5:
            exit (0);
    	}
}
return 0;
}